<?php
/**
 * Implements hook_help().
 *
 * Displays help and module information.
 *
 * @param path
 *   Which path of the site we're using to display help
 * @param arg
 *   Array that holds the current path as returned from arg() function
 */
function d4dl_resource_watch_help($path, $arg) {
    switch ($path) {
        case "admin/help#d4dl_resource_watch":
            return '' . t("Displays links to nodes created on this date") . '';
            break;
    }
}

/**
 * Implements hook_block_info().
 */
function d4dl_resource_watch_block_info() {
    $blocks['d4dl_resource_watch'] = array(
        // The name that will appear in the block list.
        'info' => t('Current posts'),
        // Default setting.
        'cache' => DRUPAL_CACHE_PER_ROLE,
    );
    return $blocks;
}
/**
 * Custom content function.
 *
 * Set beginning and end dates, retrieve posts from database
 * saved in that time period.
 *
 * @return
 *   A result set of the targeted posts.
 */
function d4dl_resource_watch_contents($display){   //$display argument is new.
    //Get today's date.
    $today = getdate();
    //Calculate midnight a week ago.
    $start_time = mktime(0, 0, 0,$today['mon'],($today['mday'] - 7), $today['year']);
    //Get all posts from one week ago to the present.
    $end_time = time();

    $max_num = variable_get('d4dl_resource_watch_max', 3);

    //Use Database API to retrieve current posts.
    $query = db_select('node', 'n')
        ->fields('n', array('nid', 'title', 'created'))
        ->condition('status', 1) //Published.
        ->condition('created', array($start_time, $end_time), 'BETWEEN')
        ->orderBy('created', 'DESC'); //Most recent first. Query paused here.

    if ($display == 'block'){
        // Restrict the range if called with 'block' argument.
        $query->range(0, $max_num);
    } //Now proceeds to execute().
    //If called by page, query proceeds directly to execute().

    return $query->execute();
}

/**
 * Implements hook_block_view().
 *
 * Prepares the contents of the block.
 */
function d4dl_resource_watch_block_view($delta = '') {
    switch ($delta) {
        case 'd4dl_resource_watch':
            $block['subject'] = t('Current posts');
            if (user_access('access content')) {
                // Use our custom function to retrieve data.
                $result = d4dl_resource_watch_contents('block');
                // Array to contain items for the block to render.
                $items = array();
                // Iterate over the resultset and format as links.
                foreach ($result as $node) {
                    $items[] = array(
                        'data' => l($node->title, 'node/' . $node->nid),
                    );
                }
                // No content in the last week.
                if (empty($items)) {
                    $block['content'] = t('No posts available.');
                }
                else {
                    // Pass data through theme function.
                    $block['content'] = theme('item_list', array(
                        'items' => $items));
                }
            }
            return $block;
    }
}

/**
 * The update is done via the services and services_entity modules.
 * the aliases are api/order and api/product
 */

function d4dl_resource_watch_entity_update($entity, $type) {
    /**
     The rest services may have output related to some debugging.
     You need to watch for that and print it out if it happens because
     it will be a difficult to debug issue.
     espeically related to this always_populate_raw_post_data = -1
     Authenticate to this url to get the csrf token:
     POST to: {"username": "admin", "password": "Quicks@nd1"}
     http://remanplanet.com/drupal/api/1.0/user/token.json
     *
     PUT this
    {
    "revision_id": "134",
    "status": "complete50",
    "order_id": "29",
    "type": "commerce_order"
    }
     * to http://remanplanet.com/drupal/api/1.0/order/29.json
     with header 
     * 
     Content-Type: application/json
     X-CSRF-Token: oSLOQJK6I00ORgX8z3Xyg7LeKJk4V5mnCWhlmQ2lWR0
     */

    /** Order info research
    products are here: http://remanplanet.com/drupal/api/1.0/order/29
    $order_wrapper = entity_metadata_wrapper('commerce_order', $entity);
    //$shipping is an array containing all shipping data
    $shipping = $order_wrapper->commerce_customer_shipping->commerce_customer_address->value();

    $payment_method = '';
    $order = commerce_order_load($order_id);
    $r = explode('|', $order->data['payment_method']);
    if (count($r) > 1){
        $rule = rules_config_load($r[1]);
        $payment_method = $rule->label;
    }
    Order info research */

    // Update the entity's entry in a fictional table of all entities.
    $info = entity_get_info($type);
    error_log("--- D4DL Entity is updated:\n" . json_encode($entity, JSON_PRETTY_PRINT));
    $currentOrder = _d4dl_resource_watch_post_payload(array(), "cartOrders/search/findByTenantIdAndShoppingCartIdAndCartOrderSystemId?".
                                                      "tenantId=drupalDemoClient&shoppingCartId=demoClientDrupalStore&cartOrderSystemId=".$entity->order_number, "GET");
    if(is_object($entity) && $entity->type == 'commerce_order') {
        $is_complete = isset($entity->data->commerce_payment_order_paid_in_full_invoked) && $entity->data->commerce_payment_order_paid_in_full_invoked;
        $payload = _d4dl_resource_watch_create_d4dl_order_payload($entity);
        if($currentOrder != null) {
            $payload->_links->self->href = $currentOrder->_links->self->href;
            $orderResponse = _d4dl_resource_watch_post_payload($payload, "cartOrders", "PATCH");
        } else {
            $orderResponse = _d4dl_resource_watch_post_payload($payload, "cartOrders");
        }
    }
}

/**
 * @param $entity
 * @return array
 */
function _d4dl_resource_watch_create_d4dl_order_payload($entity)
{
    $payload = array(
        'transactionId'        => $entity->order_number,
        'tenantId'             => 'drupalDemoClient',
        'shoppingCartId'       => 'demoClientDrupalStore',
        'cartOrderSystemId'    => $entity->order_id,
        'status'               => $entity->status,
        'orderTag'             => 'cart',
        'shoppingCartType'     => 'drupal_commerce_rest',
        'shoppingCartName'     => 'D4DL Drupal Store',
        'siteName'             => 'D4DL Drupal Store',
        'processDefinitionKey' => variable_get('d4dl_resource_watch_process_key'),
        'amount'               => $entity->commerce_order_total['und'][0]['amount'] / 100
    );
    return $payload;
}


/**
 * @param $payload
 * @return mixed
 */
function _d4dl_resource_watch_post_payload($payload, $entity, $method="POST")
{
    $url = variable_get('d4dl_resource_watch_endpoint')."/$entity";
    $options = array(
        'method' => $method,
        'headers' => array('Content-Type' => 'application/json', 'Authorization' => 'Basic amRlZm9yZDpPcGVuU2VzYW1l'),
        'data' => json_encode($payload)
    );
    error_log("Sending resource request to $url\n " . json_encode($options, JSON_PRETTY_PRINT));
    $response = drupal_http_request($url, $options);
    if($response.code == "404") {
       return null;
    } else {
        $responseObject = json_encode($response, JSON_FORCE_OBJECT);
        error_log("Received object \n" . json_encode($response, JSON_PRETTY_PRINT));
        return json_encode($responseObject->data, JSON_FORCE_OBJECT);
    }
}

/**
 * Custom page callback function, declared in d4dl_resource_watch_menu().
 */
function _d4dl_resource_watch_page() {
    $result = d4dl_resource_watch_contents('page');
    //Array to contain items for the page to render.
    $items = array();
    //Iterate over the resultset and format as links.
    foreach ($result as $node) {
        $items[] = array(
            'data' => l($node->title, 'node/' . $node->nid),
        );
    }
    if (empty($items)) { //No content in the last week.
        $page_array['d4dl_resource_watch_arguments'] = array(
            //Title serves as page subtitle
            '#title' => t('All posts from the last week'),
            '#markup' => t('No posts available.'),
        );
        return $page_array;
    }
    else {
        $page_array['d4dl_resource_watch_arguments'] = array(
            '#title' => t('All posts from the last week'),
            '#items' => $items,
            //Theme hook with suggestion.
            '#theme' => 'item_list__d4dl_resource_watch',
        );
        return $page_array;
    }
}

function d4dl_resource_watch_update() {
    $received = file_get_contents("drupal://input");
    $received = json_decode($received, JSON_FORCE_OBJECT);
    $order = commerce_order_load($received->id);
    // Do not update the status if the order is already at it.
    if ($order->status != $received->status) {
        $order->status   = $received->status;
        $order->log      = 'AuoUpdate';
        $order->revision = TRUE;
        commerce_order_save($order);
    }
    drupal_add_html_head('Content-Type: application/json');
    $payload = _d4dl_resource_watch_create_d4dl_order_payload($order);
    print json_encode($payload);
    drupal_exit();
}

function d4dl_resource_watch_menu() {
    $items = array();
    $items['d4dl_resource_watch/update'] = array(
        'title' => 'D4DL Resource Watcher Update',
        'description' => 'Update for Resource Watcher',
        'page callback' => 'd4dl_resource_watch_update',
        'access arguments' => array('access administration pages')
    );

    $items['admin/config/content/d4dl_resource_watch'] = array(
        'title' => 'D4DL Resource Watcher',
        'description' => 'Configuration for Resource Watcher',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('d4dl_resource_watch_form'),
        'access arguments' => array('access administration pages'),
        'type' => MENU_NORMAL_ITEM,
    );

    return $items;
}

/**
 * Page callback: Current posts settings
 *
 * @see d4dl_resource_watch_menu()
 */
function d4dl_resource_watch_form($form, &$form_state) {
    $form['d4dl_resource_watch_endpoint'] = array(
        '#type' => 'textfield',
        '#title' => t('Endpoint URL'),
        '#default_value' => variable_get('d4dl_resource_watch_endpoint', 'http://remanplanet.com:8180'),
        '#size' => 60,
        '#description' => t('The d4dl service endpoint.'),
        '#required' => TRUE,
    );
    $form['d4dl_resource_watch_process_key'] = array(
        '#type' => 'textfield',
        '#title' => t('Process Key'),
        '#default_value' => variable_get('d4dl_resource_watch_process_key', 'eu_fraud_wary_process'),
        '#size' => 60,
        '#description' => t('The key for the workflow process that will process watched orders.'),
        '#required' => TRUE,
    );

    return system_settings_form($form);
}

/**
 * Implements validation from the Form API.
 *
 * @param $form
 *   A structured array containing the elements and properties of the form.
 * @param $form_state
 *   An array that stores information about the form's current state
 *   during processing.
 */
function d4dl_resource_watch_form_validate($form, &$form_state){
    $endpoint = $form_state['values']['d4dl_resource_watch_endpoint'];
    if (empty($endpoint)){
        form_set_error('d4dl_resource_watch_endpoint', t('You must enter an endpoint.'));
    }
}

/**
 * Implements hook_permission().
 */
function d4dl_resource_watch_permission() {
    return array(
        'access d4dl_resource_watch content' => array(
            'title' => t('Access content for the Current posts module'),
        )
    );
}